var __defineProperty = Object.defineProperty;
var __hasOwnProperty = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => {
  return __defineProperty(target, "__esModule", {value: true});
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defineProperty(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2) => {
  __markAsModule(target);
  if (typeof module2 === "object" || typeof module2 === "function") {
    for (let key in module2)
      if (!__hasOwnProperty.call(target, key) && key !== "default")
        __defineProperty(target, key, {get: () => module2[key], enumerable: true});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defineProperty({}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.js
__export(exports, {
  default: () => css
});
const es = __toModule(require("@rollup/pluginutils/dist/es"));
function css(options = {}) {
  const filter = es.createFilter(options.include || ["**/*.css"], options.exclude);
  const styles = {};
  const order = [];
  let dest = options.output;
  let changes = 0;
  return {
    name: "css",
    transform(code, id) {
      if (!filter(id)) {
        return;
      }
      if (options.output === false) {
        return {
          code: "export default " + JSON.stringify(code),
          map: {mappings: ""}
        };
      }
      if (!order.includes(id)) {
        order.push(id);
      }
      if (styles[id] !== code && (styles[id] || code)) {
        styles[id] = code;
        changes++;
      }
      return "";
    },
    generateBundle(opts, bundle) {
      if (!changes || options.output === false) {
        return;
      }
      changes = 0;
      let css2 = "";
      for (let x = 0; x < order.length; x++) {
        const id = order[x];
        css2 += styles[id] || "";
      }
      if (typeof options.output === "function") {
        options.output(css2, styles, bundle);
        return;
      }
      if (typeof dest !== "string") {
        if (!css2.length) {
          return;
        }
        dest = opts.file || (Array.isArray(opts.output) ? opts.output[0].file : opts.output && opts.output.file) || opts.dest || "bundle.js";
        if (dest.endsWith(".js")) {
          dest = dest.slice(0, -3);
        }
        dest = dest + ".css";
      }
      this.emitFile({type: "asset", name: dest, source: css2});
    }
  };
}
